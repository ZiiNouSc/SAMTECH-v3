const mongoose = require('mongoose');
const Agence = require('../models/agenceModel');
require('dotenv').config();

// Connexion √† MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const migrateEmailId = async () => {
  try {
    console.log('üöÄ D√©but de la migration emailId...');

    // 1. Ajouter le champ emailId √† tous les billets existants (s'il n'existe pas)
    const Billet = require('../models/billetModel');
    
    // V√©rifier si le champ emailId existe d√©j√†
    const sampleBillet = await Billet.findOne();
    if (sampleBillet && sampleBillet.emailId === undefined) {
      console.log('üìß Ajout du champ emailId aux billets existants...');
      
      // Ajouter emailId: null √† tous les billets existants
      const result = await Billet.updateMany(
        { emailId: { $exists: false } },
        { $set: { emailId: null } }
      );
      
      console.log(`‚úÖ ${result.modifiedCount} billets mis √† jour avec emailId: null`);
    } else {
      console.log('‚úÖ Le champ emailId existe d√©j√† dans le mod√®le');
    }

    // 2. R√©initialiser lastImport pour toutes les agences pour forcer un nouveau premier import
    console.log('üîÑ R√©initialisation de lastImport pour toutes les agences...');
    
    const resultAgences = await Agence.updateMany(
      {},
      { $unset: { lastImport: "" } }
    );
    
    console.log(`‚úÖ ${resultAgences.modifiedCount} agences ont leur lastImport r√©initialis√©`);

    // 3. Afficher les informations sur la migration
    const totalBillets = await Billet.countDocuments();
    const totalAgences = await Agence.countDocuments();
    
    console.log('\nüìä R√©sum√© de la migration:');
    console.log(`- Total billets: ${totalBillets}`);
    console.log(`- Total agences: ${totalAgences}`);
    console.log(`- Agences avec lastImport r√©initialis√©: ${resultAgences.modifiedCount}`);
    
    console.log('\nüéØ Prochaines √©tapes:');
    console.log('1. Red√©marrer le serveur backend');
    console.log('2. La prochaine fois qu\'une agence fera "Capture Billets", ce sera un premier import');
    console.log('3. Le syst√®me utilisera la logique de quinzaine pour le premier import');
    console.log('4. Les imports suivants continueront √† partir du dernier email trait√©');
    console.log('5. Aucun doublon ne sera cr√©√© gr√¢ce au champ emailId');

    console.log('\n‚úÖ Migration termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  } finally {
    mongoose.connection.close();
    console.log('üîå Connexion √† MongoDB ferm√©e');
  }
};

// Ex√©cuter la migration
migrateEmailId(); 