const mongoose = require('mongoose');
const Fournisseur = require('../models/fournisseurModel');

// Configuration de la connexion MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/samtech');
    console.log('‚úÖ Connexion √† MongoDB √©tablie');
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† MongoDB:', error);
    process.exit(1);
  }
};

// Migration des champs fournisseur
const migrateFournisseurFields = async () => {
  try {
    console.log('üîÑ D√©but de la migration des champs fournisseur...');
    
    // R√©cup√©rer tous les fournisseurs
    const fournisseurs = await Fournisseur.find({});
    console.log(`üìä ${fournisseurs.length} fournisseurs trouv√©s`);
    
    let updatedCount = 0;
    
    for (const fournisseur of fournisseurs) {
      const updateData = {};
      let needsUpdate = false;
      
      // Forcer la mise √† jour pour s'assurer que les champs existent
      if (fournisseur.detteFournisseur === undefined || fournisseur.detteFournisseur === null) {
        updateData.detteFournisseur = 0;
        needsUpdate = true;
        console.log(`üìù Ajout detteFournisseur pour ${fournisseur.entreprise}`);
      }
      
      if (fournisseur.soldeCrediteur === undefined || fournisseur.soldeCrediteur === null) {
        updateData.soldeCrediteur = 0;
        needsUpdate = true;
        console.log(`üìù Ajout soldeCrediteur pour ${fournisseur.entreprise}`);
      }
      
      // Si le fournisseur a un ancien champ 'solde', le migrer vers 'detteFournisseur'
      if (fournisseur.solde !== undefined && fournisseur.solde !== null) {
        updateData.detteFournisseur = fournisseur.solde;
        updateData.solde = undefined; // Supprimer l'ancien champ
        needsUpdate = true;
        console.log(`üìù Migration du fournisseur ${fournisseur.entreprise}: solde ${fournisseur.solde} ‚Üí detteFournisseur ${fournisseur.solde}`);
      }
      
      // Forcer la mise √† jour m√™me si les champs existent d√©j√† pour s'assurer qu'ils sont bien d√©finis
      if (!needsUpdate) {
        updateData.detteFournisseur = fournisseur.detteFournisseur || 0;
        updateData.soldeCrediteur = fournisseur.soldeCrediteur || 0;
        needsUpdate = true;
        console.log(`üìù Mise √† jour forc√©e pour ${fournisseur.entreprise}`);
      }
      
      if (needsUpdate) {
        await Fournisseur.findByIdAndUpdate(fournisseur._id, updateData);
        updatedCount++;
      }
    }
    
    console.log(`‚úÖ Migration termin√©e: ${updatedCount} fournisseurs mis √† jour`);
    
    // V√©rification finale
    const verificationCount = await Fournisseur.countDocuments({
      $and: [
        { detteFournisseur: { $exists: true } },
        { soldeCrediteur: { $exists: true } }
      ]
    });
    
    console.log(`üîç V√©rification: ${verificationCount} fournisseurs ont les nouveaux champs`);
    
    // Afficher les d√©tails de chaque fournisseur
    const allFournisseurs = await Fournisseur.find({});
    console.log('\nüìã D√©tails des fournisseurs apr√®s migration:');
    allFournisseurs.forEach(f => {
      console.log(`  - ${f.entreprise}: dette=${f.detteFournisseur || 0}, solde=${f.soldeCrediteur || 0}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  }
};

// Ex√©cution de la migration
const runMigration = async () => {
  await connectDB();
  await migrateFournisseurFields();
  
  console.log('üèÅ Migration termin√©e');
  process.exit(0);
};

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (err) => {
  console.error('‚ùå Erreur non g√©r√©e:', err);
  process.exit(1);
});

// Ex√©cuter la migration
runMigration(); 